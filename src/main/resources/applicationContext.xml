<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--  Spring的配置文件， 主要是声明和业务逻辑有关的对象  -->

    <!--  0. 组件扫描器，识别 @Service、@的标签、  -->
    <!--<context:component-scan base-package="com.foubaby" use-default-filters="false">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>-->
    <context:component-scan base-package="com.foubaby.service"/>


    <!--  1. 数据源 C3P0连接池  -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--  2. 配置和Mybatis 的整合  -->

    <!--<bean id="sessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        &lt;!&ndash;   指定 Mybatis 全局配置文件的位置     &ndash;&gt;
        <property name="configLocation" value="classpath:mybatis.xml"/>
        &lt;!&ndash;   指定数据源对象    &ndash;&gt;
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="pooledDataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--  3.  配置扫描器，将mybatis 的代理对象加入到IOC容器中    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.foubaby.dao"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>


    <!--  4. 事务控制的配置  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--    控制住数据源    -->
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>

    <!--  5. 开启基于注解的事务，使用XML配置形式的事务『比较重要的一般都是
             使用XML配置的方式来配置事务』   -->
    <!--  配置事务增强：事务具体如何切入  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--    给哪些方法添加事务处理     -->
            <tx:method name="*"/>
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!--   切入点表达式：切入到哪些类的方法中进行事务控制     -->
        <aop:pointcut id="txPoint" expression="execution(* com.foubaby.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!--   连在一起，表示通过 transactionManager 给  txPoint类 的   txAdvice 方法添加事务处理  -->


</beans>